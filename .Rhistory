graphics.off()
rm(list=ls())
#packages
library(data.table)
library(fixest)
library(viridis)
require(ggplot2)
require(knitr)
require(stargazer)
require(tidyr)
require(ddplyr)
setwd("~/Dropbox/data_processed/")
setwd("~/Dropbox/data_processed/")
.33-.28
(.33-.28)/.33
---
title: "Carbon and Fire DAG"
791000 + 976988 + 650000 + 25000 + 25000 + 256748 + 250000 + 444487 + 157272 + 118840 + 40000 + 49271 + 10000 + 54960 + 34993 + 469291 + 47000
# BACI and BA for Asia paper
# Other Approaches
rm(list = ls())
source("useful_functions.R")
rm(list = ls())
#source("useful_functions.R")
library(tidyverse)
library(tidysynth)
library(nlme)
library(AICcmodavg)
library(purrr)
library(ggpubr)
library(microsynth)
library(fixest)
#city.data <- read.csv("data/cities.scm.input.csv")
setwd("~/Downloads/")
city.data <- read.csv("cities.scm.input.csv")
city.data <- city.data %>%
rename("nobs45km" = "n.obs45km")
#Subset for cities with closer number of observations during treatment year
cities.pool <- city.data %>%
filter(year == 2021) %>%
filter(nobs45km > 75 & nobs45km < 500)
#Extract the city column
cities.pool <-cities.pool$City
#Keeping subset of cities in final dataframe
#Removing Boston, Atlanta and Baltimore for experiencing this treatment. Removing Houston for abnormal abundance spike in 2016.
city.data <- city.data %>%
filter(City != "Boston"& City != "Atlanta" & City != "Baltimore" & City != "Houston")%>%
filter(City %in% cities.pool)
write.csv(city.data, "city_dat.csv", row.names = FALSE)
Asia_Theme <- theme(
plot.title = element_text(size = 20),
plot.caption = element_text(size = 16),
axis.title = element_text(size = 20),
axis.text = element_text(size = 20),
axis.text.x = element_text(size = 20),
legend.text = element_text(size= 20))
city.data.baci2 <- city.data %>%
mutate(Time = ifelse(year >= 2021, 1, 0)) %>%
mutate(Treated = if_else(City == "Philadelphia",1,0))%>%
filter(City == "Philadelphia" | City == "Chicago")%>%
filter(year <= 2022)
baci.model <- feols(nobs45km ~ Treated * Time, data = city.data.baci2, cluster = "City")
summary(baci.model)
baci.model2 <- lmer(nobs45km ~ Treated * Time + (1|City), data = city.data.baci2)
library(lmer)
library(lmre)
library(lmer)
library(lme4)
baci.model2 <- lmer(nobs45km ~ Treated * Time + (1|City), data = city.data.baci2)
summary(baci.model2)
confint.baci <- confint(baci.model2)
20000*.50
20000*.2
Fig2_Impacts.R
library(ggplot2)
library(dplyr)
library(tidyr)
#setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/data")
#reshaped_data <- read.csv("reshaped_3_byFlow.csv")
reshaped_data <- read.csv("reshaped_4_drivers.csv")
setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/data")
#reshaped_data <- read.csv("reshaped_3_byFlow.csv")
reshaped_data <- read.csv("reshaped_4_drivers.csv")
glimpse(reshaped_data)
altered_flow_cols <- names(reshaped_data)[grepl("2.7.Altered.Flow.", names(reshaped_data))]
impact_cols <- names(reshaped_data)[grepl("2.12.Impact.", names(reshaped_data))]
driver_cols <- names(reshaped_data)[grepl("driver.", names(reshaped_data))]
#Remove the No Impact entry
impact_cols <- impact_cols[-1]
# Filter relevant columns for Altered Flow and Impact
"%notin%" <- Negate("%in%")
interaction_data <- reshaped_data %>% filter(`Citation` %notin% c("TEST","test","Test")) %>%
select(all_of(c(altered_flow_cols, impact_cols, driver_cols))) %>%
mutate(row_id = row_number())  %>%
filter(!if_all(-row_id, ~ .x == ""))
glimpse(interaction_data)
#flow_columns <- names(interaction_data)[grepl("Altered Flow", names(interaction_data))]
#impact_columns <- names(interaction_data)[grepl("Impact", names(interaction_data))]
#update column names
flow_columns <- names(interaction_data)[grepl("2.7.Altered.Flow.", names(interaction_data))]
impact_columns <- names(interaction_data)[grepl("2.12.Impact.", names(interaction_data))]
# Generate all possible combinations of flows and impacts
combinations <- expand.grid(
Flow = flow_columns,
Impact = impact_columns,
stringsAsFactors = FALSE
)
# Count occurrences of each combination in the data
combination_counts <- combinations %>%
rowwise() %>%
mutate(
count = sum(
interaction_data[[Flow]] != "" & interaction_data[[Impact]] != "",
na.rm = TRUE
)
) %>%
ungroup()
# Convert to a dataframe for easy viewing
combination_counts_df <- as.data.frame(combination_counts)
# Preview the result
glimpse(combination_counts_df)
# Create the plot of paper counts by combination
ggplot(combination_counts_df, aes(x = Flow, y = Impact, size = count)) +
geom_point(color = "blue", alpha = 0.7) +  # Use points to represent combinations
scale_size_continuous(range = c(3, 10)) +  # Adjust size range for better visibility
labs(
title = "Interaction Between Altered Flows and Impacts",
x = "Altered Flow",
y = "Impact",
size = "Count"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "grey80", linetype = "dotted")
)
# Count occurrences for each Impact direction
combination_counts_by_impact <- combinations %>%
rowwise() %>%
mutate(
Increase = sum(
interaction_data[[Flow]] != "" & interaction_data[[Impact]] == "Increase",
na.rm = TRUE
),
Decrease = sum(
interaction_data[[Flow]] != "" & interaction_data[[Impact]] == "Decrease",
na.rm = TRUE
),
Complex = sum(
interaction_data[[Flow]] != "" & interaction_data[[Impact]] == "Complex change",
na.rm = TRUE
),
) %>%
pivot_longer(cols = c(Increase, Decrease, Complex), names_to = "ImpactDirection", values_to = "count") %>%
ungroup()
# Filter out rows with count == 0
combination_counts_by_impact_filtered <- combination_counts_by_impact %>%
filter(count > 0)
# Plot with facets by Impact direction, excluding zero counts
ggplot(combination_counts_by_impact_filtered, aes(x = Flow, y = Impact, size = count, color = ImpactDirection)) +
geom_point(alpha = 0.7) +  # Add points with alpha transparency
facet_wrap(~ImpactDirection, scales = "free") +  # Create facets for each impact direction
scale_size_continuous(range = c(3, 10)) +  # Adjust size range
scale_color_manual(values = c("Increase" = "dodgerblue3", "Decrease" = "deeppink3", "Complex" = "goldenrod1")) +
labs(
title = "Interaction Between Altered Flows and Impacts by Impact Direction",
x = "Altered Flow",
y = "Impact",
size = "Count",
color = "Impact Direction"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "grey80", linetype = "dotted")
)
#### Do for drivers
# Generate all possible combinations of flows and impacts
combinations2 <- expand.grid(
# Flow = flow_columns,
Impact = impact_columns,
Driver = driver_cols,
stringsAsFactors = FALSE
)
# Count occurrences of each combination in the data
# combination_counts_driver_impact <- combinations2 %>%
#   rowwise() %>%
#   mutate(
#     count = sum(
#       interaction_data[[Driver]] != "" & interaction_data[[Impact]] != "",
#       na.rm = TRUE
#     )
#   ) %>%
#   ungroup()
combination_counts_by_impact_driver <- combinations2 %>%
rowwise() %>%
mutate(
Increase = sum(
interaction_data[[Driver]] != "" & interaction_data[[Impact]] == "Increase",
na.rm = TRUE
),
Decrease = sum(
interaction_data[[Driver]] != "" & interaction_data[[Impact]] == "Decrease",
na.rm = TRUE
),
Complex = sum(
interaction_data[[Driver]] != "" & interaction_data[[Impact]] == "Complex change",
na.rm = TRUE
),
NoChange= sum(
interaction_data[[Driver]] != "" & interaction_data[[Impact]] == "No change (measured)",
na.rm = TRUE
)
) %>%
pivot_longer(cols = c(Increase, Decrease, Complex, NoChange), names_to = "ImpactDirection", values_to = "count") %>%
ungroup()
#this looks wrong -
driver_impact <-  ggplot(combination_counts_by_impact_driver_filtered, aes(x = Driver, y = Impact, size = count, color = ImpactDirection)) +
geom_point(alpha = 0.7) +  # Add points with alpha transparency
facet_wrap(~ImpactDirection, scales = "fixed") +  # Create facets for each NCP direction
scale_size_continuous(range = c(1, 10)) +  # Adjust size range
scale_color_manual(values = c("Increase" = "dodgerblue3", "Decrease" = "deeppink3", "Complex" = "goldenrod1", "NoChange" = "grey70")) +
labs(
title = "Driver to Biodiversity Impact",
x = "Driver",
y = "Impact",
size = "Count",
color = "Impact Direction"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
panel.grid.major = element_line(color = "grey80", linetype = "dotted")
)
#load libraries
library(ggplot2)
library(data.table)
library(reshape2)
library(dplyr)
# Filter relevant columns for Altered Flow and Impact
"%notin%" <- Negate("%in%")
setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/")
reshaped_data <- read.csv("data/007_output_interventions.csv")
glimpse(reshaped_data)
table(reshaped_data$X2.1.Flow.Type)
data <- reshaped_data %>% filter(`X2.1.Flow.Type` %notin% c("Remove","Recode"))
driver_cols <- names(data)[grepl("driver.", names(data))]
## Count of paper by Flow
table(data$X2.1.Flow.Type)
data = as.data.table(data)
data = data[X2.1.Flow.Type =="'Trade (transport of goods and services)'", X2.1.Flow.Type := "Human movement"]
data = data[X2.1.Flow.Type =="Trade", X2.1.Flow.Type := "Human movement"]
flowcount <- ggplot(as.data.frame(data), aes(X2.1.Flow.Type,  fill = X2.1.Flow.Type)) +
geom_bar(position = 'dodge') +
labs(
title = "Count of Papers by Flow Type",
x = "Flow Type",
y = "Count") +
theme_minimal() + theme(legend.position="none")
flowcount
#do as % :
flow_percent <- data %>%
group_by(X2.1.Flow.Type) %>%
summarise (n = n()) %>%
mutate(prop = n / sum(n))
ggplot(flow_percent, aes(as.factor(X2.1.Flow.Type), prop)) +
geom_col(aes(fill = as.factor(X2.1.Flow.Type))) +
labs( title = "Proportion of Flow Type",
x = "Flow Type",
y = "Proportion of Entries") +
theme_minimal() + theme(legend.position="none")
## Count of paper by Subflow
table(data$X2.2.Subtype)
data = data[X2.2.Subtype =="knowledge transfer", X2.2.Subtype := "Knowledge transfer"]
data = data[X2.2.Subtype =="knowledge transfer", X2.2.Subtype := "Knowledge transfer"]
#load libraries
library(ggplot2)
library(tidyverse)
library(data.table)
library(forcats)
library(ggalluvial)
"%notin%" <- Negate("%in%")
setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/")
reshaped_data <- fread("data/007_output_interventions.csv")
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
reshaped_data <- fread("data/007_output_interventions.csv")
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
impact_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow","X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^X2.12.Impact"),
variable.name = "impact",
value.name="direction")[direction!="",][,impact:=gsub(pattern="^X2.12.Impact..(*)", replacement="\\1",impact)]
data <- read_excel("data/data_cleaning/reshaped_3_drivers_Jan10_interventions_feb13.xlsx", sheet = "combined_coding")
data <- read_excel("data/data_cleaning/reshaped_3_drivers_Jan10_interventions_feb13.xlsx", sheet = "combined_coding")
df1 <- read.csv('data/006_output_recoded.csv')
install.packages("tidyverse")
install.packages("readxl")
install.packages("tidyverse")
data <- read_excel("data/data_cleaning/reshaped_3_drivers_Jan10_interventions_feb13.xlsx", sheet = "combined_coding")
install.packages("readxl")
library("readxl")
data <- read_excel("data/data_cleaning/reshaped_3_drivers_Jan10_interventions_feb13.xlsx", sheet = "combined_coding")
library("readxl")
data <- read_excel("data/data_cleaning/reshaped_3_drivers_Jan10_interventions_feb13.xlsx", sheet = "combined_coding")
df1 <- read.csv('data/006_output_recoded.csv')
levels(factor(df1$X2.1.Flow.Type))
data_selected <- data %>% select(ID_DOI_by_Flow, Response.Text, final.codes, Response.Mentioned.) %>% rename(intervention.text = Response.Text,intervention.codes=final.codes,Response.Mentioned.verified = Response.Mentioned.)
merged_df <- df1 %>% left_join(data_selected, by = "ID_DOI_by_Flow") %>%
mutate(Response.Mentioned.=ifelse(!is.na(Response.Mentioned.verified),Response.Mentioned.verified,Response.Mentioned.)) %>%
dplyr::select(-Response.Mentioned.verified)
glimpse(merged_df)
## Add new column
# [41] "disease detection; disease prevention; control; public outreach, awareness, and education"
levels(factor(merged_df$intervention.codes))
unique_interventions <- merged_df %>%
tidyr::separate_rows(intervention.codes, sep = ";\\s*") %>%
distinct(intervention.codes) %>%
filter(intervention.codes != "" & intervention.codes != "NA") %>%
arrange(intervention.codes) # Sort the interventions alphabetically
# Print the cleaned list of interventions
print(unique_interventions, n=200)
interventions_vector <- unique_interventions$intervention.codes
fleshed_df <- merged_df
# Iterate over each intervention and create a new column
for (intervention in interventions_vector) {
fleshed_df <- fleshed_df %>%
mutate(!!sym(intervention) := as.integer(str_detect(intervention.codes, fixed(intervention))))
}
fleshed_df <- fleshed_df %>%
rename_with(~paste("intervention:", .x),
.cols = interventions_vector)
glimpse(fleshed_df)
fleshed_df <- fleshed_df %>%
mutate(X2.2.Subtype = tolower(X2.2.Subtype))  %>%
filter(Citation!="Sivakumar, B.; 2011; Hydrological Sciences Journal")
write.csv(fleshed_df,'data/007_output_interventions.csv')
fleshed_df_g <-  fleshed_df %>% group_by(X2.1.Flow.Type,X2.2.Subtype) %>%
mutate(count=n())
glimpse(fleshed_df_g)
fleshed_df_g$X2.2.Subtype <- factor(fleshed_df_g$X2.2.Subtype, levels = sort(unique(fleshed_df_g$X2.2.Subtype)))
ggplot(fleshed_df_g, aes(y=X2.2.Subtype,fill=X2.1.Flow.Type))+
geom_bar() +
theme_minimal() +
scale_fill_brewer(palette = "Set2") +
labs(x = "count",y="Subflow",fill="Flow")
fleshed_df <- fleshed_df %>% filter(X2.1.Flow.Type %notin% c("Remove","Recode"))
# We'll gather only the intervention columns
intervention_data <- fleshed_df %>%
pivot_longer(
cols = starts_with("intervention:"),
names_to = "intervention",
values_to = "value"
) %>%
filter(value == 1) %>%  # Keep only rows where intervention is applied
group_by(X2.1.Flow.Type, intervention) %>%
summarise(count = n(), .groups = 'drop')  # Count each intervention per flow type
#### FUNCTIONING PLOTS - DO NOT ERASE
# ggplot(intervention_data, aes(x = X2.1.Flow.Type, y = count, fill = intervention)) +
#   geom_bar(stat = "identity", position = position_dodge()) +  # Use dodge to group bars
#   theme_minimal() +
#   labs(
#     title = "Intervention Frequency by Flow Type",
#     x = "Flow Type",
#     y = "Count of Interventions",
#     fill = "Intervention"
#   ) +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
# library(tidyverse)
# # Gather the intervention columns and convert to long format
# intervention_data <- fleshed_df %>%
#   pivot_longer(
#     cols = starts_with("intervention:"),
#     names_to = "intervention",
#     values_to = "value"
#   ) %>%
#   filter(value == 1) %>%  # Consider only cases where the intervention is applied
#   group_by(X2.1.Flow.Type, intervention) %>%
#   summarise(count = n(), .groups = 'drop')  # Count each intervention per flow type
# Create a complete grid to fill in missing combinations with zeros
intervention_matrix <- expand_grid(
X2.1.Flow.Type = unique(fleshed_df$X2.1.Flow.Type),
intervention = unique(intervention_data$intervention)
) %>%
left_join(intervention_data, by = c("X2.1.Flow.Type", "intervention")) %>%
replace_na(list(count = 0))  # Replace NA values with zero
glimpse(intervention_matrix)
intervention_matrix$intervention <- sub("^intervention: ", "", intervention_matrix$intervention)
ggplot(intervention_matrix, aes(x = intervention, y = X2.1.Flow.Type, fill = count)) +
geom_tile() +  # Use geom_tile() for heatmap squares
scale_fill_gradient(low = "white", high = "steelblue", name = "Count") +
theme_minimal() +
labs(
title = "Heatmap of Interventions by Flow Type",
x = "Intervention",
y = "Flow Type"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))  # Rotate x-axis labels for better readability
# Create a complete grid to fill in missing combinations with zeros
glimpse(fleshed_df)
#load libraries
library(ggplot2)
library(tidyverse)
library(data.table)
library(forcats)
library(ggalluvial)
"%notin%" <- Negate("%in%")
setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/")
reshaped_data <- fread("data/007_output_interventions.csv")
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
glimpse(reshaped_data)
library(ggplot2)
library(tidyverse)
library(data.table)
library(forcats)
library(ggalluvial)
setwd("/Users/lade8828/Library/CloudStorage/OneDrive-UCB-O365/Documents/GitHub/BCCAch7/")
reshaped_data <- fread("data/007_output_interventions.csv")
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
?melt
class(reshaped_data)
?patterns
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = data.table::patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns("^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns("driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns("driver"),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data, measure.vars = patterns("^driver"))
?patterns
data.table::patterns("^driver.", cols=cols(driver_data))
data.table::patterns("^driver.", cols=cols(reshaped_data))
data.table::patterns("^driver.", cols=names(reshaped_data))
data.table::patterns(driver="^driver.", cols=names(reshaped_data))
patterns(driver="^driver.", cols=names(reshaped_data))
patterns(driver="^driver.")
driver_data = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver.", cols=names(reshaped_data)),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver.", cols=names(reshaped_data)),
variable.name = "driver")
melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver.", cols=names(reshaped_data)),
variable.name = "driver")[value==TRUE,]
class(reshaped_data)
tmp = melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver.", cols=names(reshaped_data)),
variable.name = "driver")
tmp
class(tmp)
?melt
driver_data = data.table::melt(reshaped_data,
id.vars=c("ID_DOI_by_Flow", "X2.1.Flow.Type", "X2.2.Subtype","DOI"),
measure.vars = patterns(driver="^driver."),
variable.name = "driver")[value==TRUE,][,value:=NULL][,driver:=gsub(pattern="^driver.(*)", replacement="\\1",driver)]
driver_data
driver_data
